admin:
  access_log_path: /dev/stdout
  address:
    socket_address: { address: 0.0.0.0, port_value: 9901 }

static_resources:
  listeners:
  - name: http_listener
    address:
      socket_address: { address: 0.0.0.0, port_value: 8080 }
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          stat_prefix: ingress_http

          access_log:
          - name: envoy.access_loggers.stdout
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
              log_format:
                text_format: "[%START_TIME%] %RESPONSE_CODE% %REQ(:method)% %REQ(:path)% auth=%REQ(authorization)% xjwt=%REQ(x-jwt-payload)% tid=%REQ(x-tenant-id)% princ=%REQ(x-principal)%\n"

          route_config:
            name: local_route
            virtual_hosts:
            - name: app
              domains: ["*"]
              routes:
              # Public: bypass
              - name: public-route
                match: { prefix: "/public" }
                route: { cluster: app_service }
                typed_per_filter_config:
                  envoy.filters.http.ext_authz:
                    "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute
                    disabled: true

              # EXACT "/" first
              - name: root-exact
                match: { path: "/" }
                route: { cluster: app_service }

              # Catch-all (protected)
              - name: protected-route
                match: { prefix: "/" }
                route: { cluster: app_service }

          http_filters:
          # 1) Authentication JWT (HS256)
          - name: envoy.filters.http.jwt_authn
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.jwt_authn.v3.JwtAuthentication
              providers:
                main_jwt:
                  issuer: "https://auth.local/"
                  audiences: ["pdp.example.local"]
                  local_jwks:
                    inline_string: |
                      {
                        "keys": [{
                          "kty": "oct",
                          "kid": "dev",
                          "alg": "HS256",
                          "k": "ZGV2LXZlcnktc2VjcmV0"
                        }]}
                  forward: true
                  forward_payload_header: "x-jwt-payload"
                  claim_to_headers:
                    - header_name: "x-tenant-id"
                      claim_name: "tid"
                    - header_name: "x-principal"
                      claim_name: "sub"
                    - header_name: "x-resource"
                      claim_name: "res"
                    - header_name: "x-action"
                      claim_name: "act"
              rules:
                - match: { prefix: "/public" }
                  requires: { allow_missing: {} }
                - match: { prefix: "/" }
                  requires: { provider_name: "main_jwt" }
          # 2) Authorization (PDP) âœ…
          - name: envoy.filters.http.ext_authz
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
              transport_api_version: V3
              http_service:
                server_uri:
                  uri: http://pdp:8081
                  cluster: pdp_cluster
                  timeout: 0.100s
                path_prefix: /check
                authorization_request:
                  allowed_headers:
                    patterns:
                      - exact: "x-tenant-id"
                      - exact: "x-principal"
                      - exact: "x-resource"
                      - exact: "x-action"
                      - exact: "x-jwt-payload"
                  headers_to_add:
                    - key: "x-forwarded-host"
                      value: "%REQ(:authority)%"
                    - key: "x-forwarded-path"
                      value: "%REQ(:path)%"
                    - key: "x-forwarded-method"
                      value: "%REQ(:method)%"
                authorization_response:
                  allowed_upstream_headers:
                    patterns:
                      - exact: "x-obligation-mask"
              failure_mode_allow: false
          # 4) Router
          - name: envoy.filters.http.router
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router

  clusters:
  - name: app_service
    connect_timeout: 0.25s
    type: logical_dns
    lb_policy: ROUND_ROBIN
    load_assignment:
      cluster_name: app_service
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address: { address: app, port_value: 3000 }

  - name: pdp_cluster
    connect_timeout: 0.25s
    type: logical_dns
    lb_policy: ROUND_ROBIN
    circuit_breakers:
      thresholds:
        - priority: DEFAULT
          max_connections: 1000
          max_pending_requests: 1000
          max_requests: 5000
          max_retries: 0
    load_assignment:
      cluster_name: pdp_cluster
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address: { address: pdp, port_value: 8081 }
